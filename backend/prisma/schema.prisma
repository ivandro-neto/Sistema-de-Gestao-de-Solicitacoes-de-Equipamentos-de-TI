datasource db {
  provider = "postgresql"
  url      = "postgresql://neondb_owner:npg_EvMmc2qabpf5@ep-sparkling-voice-a486mmhx-pooler.us-east-1.aws.neon.tech/neondb?sslmode=require"
}

generator client {
  provider = "prisma-client-js"
}

model Usuario {
  id           String          @id @default(uuid())
  nome         String
  email        String          @unique
  senha        String?
  tipo         Int             // 'Solicitante', 'Técnico', 'Administrador'
  departamento String?
  solicitacoes Solicitation[]  @relation("UsuarioSolicitations")
  tecnico      Tecnico?
}

model Solicitation {
  id             String                    @id @default(uuid())
  solicitanteId  String
  equipamentoId  String                    // Associar solicitação a um equipamento
  descricao      String
  status         String                    // 'Pendente', 'Em Progresso', 'Concluída', 'Cancelada'
  createdAt      DateTime                  @default(now())
  updatedAt      DateTime                  @updatedAt
  usuario        Usuario                   @relation("UsuarioSolicitations", fields: [solicitanteId], references: [id])
  equipamento    Equipamento               @relation(fields: [equipamentoId], references: [id])
  atribuicoes    AtribuicaoTecnico[]
  historico      HistoricoSolicitacoes[]
}

model Equipamento {
  id           String          @id @default(uuid())
  nome         String
  descricao    String
  componentes  EquipmentComponent[]
  solicitacoes Solicitation[]
}

model Componente {
  id                   String              @id @default(uuid())
  nome                 String
  descricao            String
  quantidadeDisponivel Int
  unidadeMedida        String
  equipamentos         EquipmentComponent[]
}

model EquipmentComponent {
  id                    String       @id @default(uuid())
  equipamentoId         String
  componenteId          String
  quantidadeNecessaria  Int
  equipamento           Equipamento  @relation(fields: [equipamentoId], references: [id])
  componente            Componente   @relation(fields: [componenteId], references: [id])
}

model Tecnico {
  id            String              @id @default(uuid())
  usuarioId     String              @unique
  especialidade String
  status        String              // 'Disponivel', 'Ocupado'
  usuario       Usuario             @relation(fields: [usuarioId], references: [id])
  atribuicoes   AtribuicaoTecnico[]
}

model AtribuicaoTecnico {
  id             String         @id @default(uuid())
  solicitacaoId  String
  tecnicoId      String
  dataAtribuicao DateTime       @default(now())
  solicitacao    Solicitation   @relation(fields: [solicitacaoId], references: [id])
  tecnico        Tecnico        @relation(fields: [tecnicoId], references: [id])
}

model HistoricoSolicitacoes {
  id             String         @id @default(uuid())
  solicitacaoId  String
  statusAnterior String
  statusNovo     String
  dataAlteracao  DateTime       @default(now())
  solicitacao    Solicitation   @relation(fields: [solicitacaoId], references: [id])
}

model Relatorio {
  id            String     @id @default(uuid())
  tipoRelatorio String
  dataGeracao   DateTime   @default(now())
  conteudo      String
}
